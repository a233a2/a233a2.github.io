<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Docker on sunjiyi&#39;s Blogggg</title>
        <link>https://a233a2.github.io/tags/docker/</link>
        <description>Recent content in Docker on sunjiyi&#39;s Blogggg</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Sunjiyi Make and Design</copyright>
        <lastBuildDate>Wed, 20 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://a233a2.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Docker基础</title>
        <link>https://a233a2.github.io/p/docker%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>https://a233a2.github.io/p/docker%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://a233a2.github.io/p/docker%E5%9F%BA%E7%A1%80/11.jpg" alt="Featured image of post Docker基础" /&gt;&lt;p&gt;参考：
&lt;a class=&#34;link&#34; href=&#34;https://yeasy.gitbook.io/docker_practice&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker-从入门到实践&lt;/a&gt;&amp;mdash;一本书 &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/7021006271818137630?share_token=878fa440-84d9-4d8a-980e-aaba73440daf#heading-4_&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;求求你了，用Docker吧&lt;/a&gt;&amp;mdash;某博客    &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/get-started/get-docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker安装教程&lt;/a&gt;&amp;mdash;官方安装教程     &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV14s4y1i7Vf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GeekHour-30分钟Docker入门教程&lt;/a&gt;&amp;mdash;特别棒&lt;/p&gt;
&lt;h2 id=&#34;docker基础的几个概念&#34;&gt;Docker基础的几个概念
&lt;/h2&gt;&lt;h3 id=&#34;镜像-image&#34;&gt;镜像 Image
&lt;/h3&gt;&lt;p&gt;理解为一个虚拟机的快照，内部包含要部署的应用程序以及他所关联的所有库。 &lt;br&gt;
是一个包含有文件系统的面向Docker引擎的只读模板。镜像是一个模板,装了一些系统的配置文件, 我们可以通过镜像建立更多的容器, 容器从镜像启动时,Docker在镜像的上层创建一个可写层, 镜像本身不变。&lt;/p&gt;
&lt;h3 id=&#34;容器-container&#34;&gt;容器 Container
&lt;/h3&gt;&lt;p&gt;通过镜像Image，可以创建许多不同的容器Container。容器可以比喻为一台台运行起来的虚拟机，容器中运行着要部署的程序。每个容器相互独立运行，互不影响。       &lt;br&gt;
容器是基于镜像创建, 相互隔离的, 可以理解为小型虚拟机，真正的执行单元。&lt;br&gt;
相当于每一个实例。&lt;br&gt;
一台计算机上可以运行几个虚拟机，但是可以运行几百个容器。&lt;/p&gt;
&lt;h3 id=&#34;容器和镜像的关系&#34;&gt;容器和镜像的关系
&lt;/h3&gt;&lt;p&gt;镜像和容器的关系就像java中类和实例的关系一样（我也没学过java..抄的） &lt;br&gt;
镜像就类似一个食谱，容器就是根据食谱做出来的一道菜。&lt;/p&gt;
&lt;h4 id=&#34;dockerfile&#34;&gt;Dockerfile
&lt;/h4&gt;&lt;p&gt;自动化脚本，用以创建镜像。&lt;br&gt;
&lt;img src=&#34;https://a233a2.github.io/p/docker%E5%9F%BA%E7%A1%80/dockerfile.jpg&#34;
	width=&#34;360&#34;
	height=&#34;447&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;dockerfile.jpg&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;193px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;docker-仓库-docker-repository&#34;&gt;Docker 仓库-Docker Repository
&lt;/h4&gt;&lt;p&gt;存放镜像的仓库 &lt;br&gt;
最流行的是DockerHub，是一个公共仓库，集中存储和管理Docker镜像。另外还有Harbor&lt;/p&gt;
&lt;h2 id=&#34;docker容器化&#34;&gt;Docker容器化
&lt;/h2&gt;&lt;p&gt;将应用程序打包成容器，然后在容器中运行程序的过程。 &lt;br&gt;
1# 创建Dockerfile 告诉Docker构建应用程序镜像所需的步骤以及配置。     &lt;br&gt;
2# 使用Dockerfile构建镜像。 &lt;br&gt;
3# 使用镜像创建和运行容器。&lt;/p&gt;
&lt;h2 id=&#34;docker简单hellodocker实践&#34;&gt;Docker简单HelloDocker实践
&lt;/h2&gt;&lt;p&gt;创建HelloDocker文件，创建node.js文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;console.log(&amp;#34;欢迎来到Docker！&amp;#34;)     
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Dockerfile中写入如下的运行流程，交给Docker自动运行。 &lt;br&gt;
&lt;img src=&#34;https://a233a2.github.io/p/docker%E5%9F%BA%E7%A1%80/dockfile1.jpg&#34;
	width=&#34;639&#34;
	height=&#34;330&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;dockerfile1.jpg&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;193&#34;
		data-flex-basis=&#34;464px&#34;
	
&gt;   &lt;br&gt;
项目根目录创建名为Dockerfile的文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM node:14-alpine
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;COPY index.js /index.js
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CMD [&amp;#34;node&amp;#34;,&amp;#34;/index.js&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出结果： &lt;br&gt;
&lt;img src=&#34;https://a233a2.github.io/p/docker%E5%9F%BA%E7%A1%80/dockerrun-1.jpg&#34;
	width=&#34;1557&#34;
	height=&#34;1094&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;输出结果：&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;   &lt;br&gt;
有个小Warning,暂时不清楚原因。&lt;/p&gt;
&lt;p&gt;play with docker网站 在线运行docker镜像 &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://labs.play-with-docker.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://labs.play-with-docker.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker命令小计&#34;&gt;Docker命令小计
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker images        #查看安装的镜像
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker image ls      #查看安装的镜像
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run 镜像名称   #运行程序
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull xxx   #获取镜像
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;dockerdesktop的使用&#34;&gt;DockerDesktop的使用
&lt;/h2&gt;&lt;p&gt;DockerDesktop集成了容器日常使用与管理的各种常用功能&lt;/p&gt;
&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose
&lt;/h2&gt;&lt;p&gt;统筹各个容器，形成一个项目。 &lt;br&gt;
使用一个yml文件定义，使用一条命令来自动安装各种依赖以及配置环境。然后在本地运行项目。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker compose up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;docker部署深度学习项目实例&#34;&gt;Docker部署深度学习项目实例
&lt;/h2&gt;&lt;p&gt;先鸽了&lt;/p&gt;
&lt;h2 id=&#34;docker部署px4开发环境实例&#34;&gt;Docker部署PX4开发环境实例
&lt;/h2&gt;&lt;p&gt;Docker的PX4容器项目地址：https://github.com/PX4/PX4-containers&lt;/p&gt;
&lt;h4 id=&#34;1-克隆项目到本地&#34;&gt;1 克隆项目到本地
&lt;/h4&gt;&lt;h4 id=&#34;2-执行&#34;&gt;2 执行
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cd docker
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker build -t px4io/px4-dev-ros-melodic -f Dockerfile_ros-melodic .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;构建完成镜像大小为6.5GB左右&lt;/p&gt;
&lt;h4 id=&#34;3-构建firmware时使用docker环境&#34;&gt;3 构建Firmware时使用Docker环境？
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://a233a2.github.io/p/docker%E5%9F%BA%E7%A1%80/px4-1.png&#34;
	width=&#34;875&#34;
	height=&#34;335&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;构建Firmware时使用Docker环境&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;626px&#34;
	
&gt; &lt;br&gt;
3这个还没试过&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
